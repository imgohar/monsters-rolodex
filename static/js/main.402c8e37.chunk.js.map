{"version":3,"sources":["components/Card/Card.jsx","components/CardList/CardList.jsx","components/SearchBox/SearchBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","src","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","filteredMonsters","useState","changeMonsters","console","log","search","changeSearch","useEffect","fetch","then","response","json","data","filter","toLowerCase","includes","e","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAeeA,EAbF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACZ,OACI,sBAAsBC,UAAU,iBAAhC,UACI,qBACIC,IAAG,+BAA0BF,EAAQG,GAAlC,2BACHC,IAAI,KAER,6BAAKJ,EAAQK,OACb,4BAAIL,EAAQM,UANNN,EAAQG,KCQXI,G,MARE,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACb,qBAAKP,UAAU,YAAf,SACKO,EAASC,KAAI,SAACT,GAAD,OACV,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQG,WCOhBO,G,MAXG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAC9B,OACI,uBACIX,UAAU,SACVY,KAAK,SACLC,SAAUF,EACVD,YAAaA,MC2BVI,MAhCf,WAAgB,IAgBRC,EAhBO,EACwBC,mBAAS,IADjC,mBACJT,EADI,KACMU,EADN,OAGoBD,mBAAS,IAAI,kBAAME,QAAQC,IAAIC,MAHnD,mBAGJA,EAHI,KAGIC,EAHJ,KAoBX,OAfAC,qBAAU,WACNC,MAAM,8CACDC,MAAK,SAACC,GACH,OAAOA,EAASC,UAEnBF,MAAK,SAACG,GACHV,EAAeU,QAExB,IACHL,qBAAU,cAAU,CAACF,IAGrBL,EAAmBR,EAASqB,QAAO,SAAC7B,GAAD,OAC/BA,EAAQK,KAAKyB,cAAcC,SAASV,EAAOS,kBAG3C,sBAAK7B,UAAU,MAAf,UACI,kDACA,cAAC,EAAD,CACIU,YAAY,kBACZC,aAAc,SAACoB,GAAD,OAAOV,EAAaU,EAAEC,OAAOC,UAE/C,cAAC,EAAD,CAAUb,OAAQA,EAAQb,SAAUQ,QCnBjCmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.402c8e37.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\nconst Card = ({ monster }) => {\n    return (\n        <div key={monster.id} className=\"card-container\">\n            <img\n                src={`https://robohash.org/${monster.id}/?set=set2&size=180x120`}\n                alt=\"\"\n            />\n            <h1>{monster.name}</h1>\n            <p>{monster.email}</p>\n        </div>\n    );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../Card/Card\";\nimport \"./CardList.css\";\n\nconst CardList = ({ monsters }) => (\n    <div className=\"card-list\">\n        {monsters.map((monster) => (\n            <Card key={monster.id} monster={monster} />\n        ))}\n    </div>\n);\n\nexport default CardList;\n","import React from \"react\";\nimport \"./SearchBox.css\";\n\nconst SearchBox = ({ placeholder, handleChange }) => {\n    return (\n        <input\n            className=\"search\"\n            type=\"search\"\n            onChange={handleChange}\n            placeholder={placeholder}\n        />\n    );\n};\n\nexport default SearchBox;\n","import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport CardList from \"./components/CardList/CardList\";\nimport SearchBox from \"./components/SearchBox/SearchBox\";\nfunction App() {\n    const [monsters, changeMonsters] = useState([]);\n\n    const [search, changeSearch] = useState(\"\", () => console.log(search));\n\n    useEffect(() => {\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then((response) => {\n                return response.json();\n            })\n            .then((data) => {\n                changeMonsters(data);\n            });\n    }, []);\n    useEffect(() => {}, [search]);\n\n    let filteredMonsters = monsters;\n    filteredMonsters = monsters.filter((monster) =>\n        monster.name.toLowerCase().includes(search.toLowerCase())\n    );\n    return (\n        <div className=\"App\">\n            <h1>Monsters Rolodex</h1>\n            <SearchBox\n                placeholder=\"Search Monsters\"\n                handleChange={(e) => changeSearch(e.target.value)}\n            />\n            <CardList search={search} monsters={filteredMonsters} />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}